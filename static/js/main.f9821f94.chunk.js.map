{"version":3,"sources":["PoolSummary.js","App.js","serviceWorker.js","index.js"],"names":["Date","prototype","addHours","hours","this","setHours","getHours","PoolSummary","props","pc","pool","workerPoolId","split","state","instances","pending","domain","length","queryTaskcluster","bind","fetch","then","response","json","container","concat","workers","setState","config","maxCapacity","continuationToken","pendingTasks","providerId","icon","faAws","faWindows","faTrashAlt","endsWith","faGoogle","faHome","key","className","renderProviderIcon","style","fontSize","filter","i","firstClaim","ProgressBar","striped","variant","now","Math","min","max","Component","App","domains","pools","showAwsPools","showAzurePools","showGooglePools","handleFilterChange","workerPools","map","wp","v","a","indexOf","Object","assign","startsWith","event","target","id","Container","Row","Form","Check","inline","type","onChange","checked","label","renderPoolSummaryComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f9821f94.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAws, faGoogle, faWindows } from \"@fortawesome/free-brands-svg-icons\";\n\nDate.prototype.addHours = function(hours){\n  this.setHours(this.getHours() + hours);\n  return this;\n}\n\nclass PoolSummary extends Component {\n  constructor(props) {\n    super(props);\n    let pc = this.props.pool.workerPoolId.split('/');\n    this.state = {\n      instances: [],\n      pending: 0,\n      domain: (pc.length > 0) ? pc[0] : '',\n      pool: (pc.length > 1) ? pc[1] : ''\n    };\n    this.queryTaskcluster = this.queryTaskcluster.bind(this);\n  }\n  \n  componentDidMount() {\n    this.queryTaskcluster();\n  }\n  \n  queryTaskcluster() {\n    let instances = [];\n    fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/provisioners/' + this.state.domain + '/worker-types/' + this.state.pool + '/workers')\n      .then(response => response.json())\n      .then(container => {\n        instances = instances.concat(container.workers);\n        this.setState({ instances });\n        if (('continuationToken' in container) && instances.length < this.props.pool.config.maxCapacity) {\n          fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/provisioners/' + this.state.domain + '/worker-types/' + this.state.pool + '/workers?continuationToken=' + container.continuationToken)\n            .then(response => response.json())\n            .then(container => {\n              instances = instances.concat(container.workers);\n              this.setState({ instances });\n              if (('continuationToken' in container) && instances.length < this.props.pool.config.maxCapacity) {\n                fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/provisioners/' + this.state.domain + '/worker-types/' + this.state.pool + '/workers?continuationToken=' + container.continuationToken)\n                  .then(response => response.json())\n                  .then(container => {\n                    instances = instances.concat(container.workers);\n                    this.setState({ instances });\n                    if (('continuationToken' in container) && instances.length < this.props.pool.config.maxCapacity) {\n                      fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/provisioners/' + this.state.domain + '/worker-types/' + this.state.pool + '/workers?continuationToken=' + container.continuationToken)\n                        .then(response => response.json())\n                        .then(container => {\n                          instances = instances.concat(container.workers);\n                          this.setState({ instances });\n                        });\n                    }\n                  });\n              }\n            });\n        }\n      });\n    fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/pending/' + this.state.domain + '/' + this.state.pool)\n      .then(response => response.json())\n      .then(container => {\n        let pending = container.pendingTasks;\n        this.setState({ pending });\n      });\n  }\n\n  renderProviderIcon() {\n    switch(this.props.pool.providerId) {\n      case 'aws':\n        return <FontAwesomeIcon icon={faAws} />;\n      case 'azure':\n        return <FontAwesomeIcon icon={faWindows} />;\n      case 'null-provider':\n        return <FontAwesomeIcon icon={faTrashAlt} />;\n      default:\n        return this.props.pool.providerId.endsWith('-gcp')\n          ? <FontAwesomeIcon icon={faGoogle} />\n          : <FontAwesomeIcon icon={faHome} />;\n    }\n  }\n\n  render() {\n    return (\n      <li key={this.props.pool.workerPoolId}>\n        <span className=\"fa-li\">\n          {this.renderProviderIcon()}\n        </span>\n        <strong>{this.state.pool}</strong>\n        <span style={{fontSize: '80%'}}>\n          &nbsp;max: {this.props.pool.config.maxCapacity},\n          &nbsp;working: {this.state.instances.filter(i => (('latestTask' in i) && ('firstClaim' in i))).length},\n          &nbsp;initialising: {this.state.instances.filter(i => ((!('latestTask' in i) || !('firstClaim' in i)) && ((new Date(i.firstClaim)) > (new Date().addHours(-1))))).length},\n          &nbsp;pending: {this.state.pending}\n        </span>\n        <br />\n        <ProgressBar>\n          <ProgressBar striped variant=\"success\" now={Math.min(this.props.pool.config.maxCapacity, this.state.instances.filter(i => (('latestTask' in i) && ('firstClaim' in i))).length)} max={this.props.pool.config.maxCapacity} key={1} />\n          <ProgressBar striped now={Math.min(this.props.pool.config.maxCapacity, this.state.instances.filter(i => ((!('latestTask' in i) || !('firstClaim' in i)) && ((new Date(i.firstClaim)) > (new Date().addHours(-1))))).length)} max={this.props.pool.config.maxCapacity} key={2} />\n        </ProgressBar>\n      </li>\n    );\n  }\n}\n\nexport default PoolSummary;","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Form from 'react-bootstrap/Form';\nimport PoolSummary from './PoolSummary';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      domains: [],\n      pools: {},\n      showAwsPools: true,\n      showAzurePools: true,\n      showGooglePools: true\n    };\n    this.queryTaskcluster = this.queryTaskcluster.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n  }\n  \n  componentDidMount() {\n    this.queryTaskcluster();\n  }\n  \n  queryTaskcluster() {\n    let workerPools = [];\n    fetch('https://firefox-ci-tc.services.mozilla.com/api/worker-manager/v1/worker-pools')\n      .then(response => response.json())\n      .then(container => {\n        workerPools = workerPools.concat(container.workerPools);\n        let domains = workerPools.map(wp => wp.workerPoolId.split('/')[0]).filter((v, i, a) => a.indexOf(v) === i);\n        let pools = Object.assign({}, ...domains.map(domain => ({[domain]: workerPools.filter(wp => wp.workerPoolId.startsWith(domain + '/'))})));\n        this.setState({ domains, pools });\n        if ('continuationToken' in container) {\n          fetch('https://firefox-ci-tc.services.mozilla.com/api/worker-manager/v1/worker-pools?continuationToken=' + container.continuationToken)\n            .then(response => response.json())\n            .then(container => {\n              workerPools = workerPools.concat(container.workerPools);\n              domains = workerPools.map(wp => wp.workerPoolId.split('/')[0]).filter((v, i, a) => a.indexOf(v) === i);\n              pools = Object.assign({}, ...domains.map(domain => ({[domain]: workerPools.filter(wp => wp.workerPoolId.startsWith(domain + '/'))})));\n              this.setState({ domains, pools });\n            });\n        }\n      });\n  }\n\n  renderPoolSummaryComponent(pool) {\n    switch(pool.providerId) {\n      case 'aws':\n        return (this.state.showAwsPools) ? <PoolSummary pool={pool} key={pool.workerPoolId} /> : '';\n      case 'azure':\n        return (this.state.showAzurePools) ? <PoolSummary pool={pool} key={pool.workerPoolId} /> : '';\n      case 'null-provider':\n        return <PoolSummary pool={pool} key={pool.workerPoolId} />;\n      default:\n        return pool.providerId.endsWith('-gcp')\n          ? (this.state.showGooglePools) ? <PoolSummary pool={pool} key={pool.workerPoolId} /> : ''\n          : <PoolSummary pool={pool} key={pool.workerPoolId} />;\n    }\n  }\n\n  handleFilterChange(event) {\n    let filterId = event.target.id;\n    switch (filterId) {\n      case 'filterAws':\n        this.setState(state => ({ showAwsPools: !state.showAwsPools }));\n        break;\n      case 'filterAzure':\n        this.setState(state => ({ showAzurePools: !state.showAzurePools }));\n        break;\n      case 'filterGoogle':\n        this.setState(state => ({ showGooglePools: !state.showGooglePools }));\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Form>\n            <Form.Check inline type=\"checkbox\" onChange={this.handleFilterChange} checked={this.state.showAwsPools} label=\"aws\" id=\"filterAws\" />\n            <Form.Check inline type=\"checkbox\" onChange={this.handleFilterChange} checked={this.state.showAzurePools} label=\"azure\" id=\"filterAzure\" />\n            <Form.Check inline type=\"checkbox\" onChange={this.handleFilterChange} checked={this.state.showGooglePools} label=\"google\" id=\"filterGoogle\" />\n          </Form>\n        </Row>\n        <Row>\n          <ul>\n          {this.state.domains.map((domain) => (\n            <li key={domain}>\n              {domain}\n              <ul className=\"fa-ul\">\n                {this.state.pools[domain].map((pool) => (\n                  this.renderPoolSummaryComponent(pool)\n                ))}\n              </ul>\n            </li>\n          ))}\n          </ul>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}