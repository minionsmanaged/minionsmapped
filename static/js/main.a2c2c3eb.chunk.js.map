{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","domains","pools","runningInstanceCounts","queryTaskcluster","bind","this","workerPools","fetch","then","response","json","container","concat","forEach","workerPool","getRunningInstanceCount","map","wp","workerPoolId","split","filter","v","i","a","indexOf","Object","assign","domain","startsWith","setState","continuationToken","provider","icon","faAws","faWindows","endsWith","faGoogle","faHome","pool","Math","floor","random","config","maxCapacity","round","runningInstanceIconCount","getRunningInstanceIconCount","nonRunningInstanceIconCount","key","className","renderProviderIcon","providerId","Array","keys","faServer","style","marginRight","color","getNonRunningInstanceIconCount","fontSize","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a2c2c3eb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome, faServer } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAws, faGoogle, faWindows } from \"@fortawesome/free-brands-svg-icons\";\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      domains: [],\n      pools: {},\n      runningInstanceCounts: {}\n    };\n    this.queryTaskcluster = this.queryTaskcluster.bind(this);\n  }\n  \n  componentDidMount() {\n    this.queryTaskcluster();\n  }\n  \n  queryTaskcluster() {\n    let workerPools = [];\n    fetch('https://firefox-ci-tc.services.mozilla.com/api/worker-manager/v1/worker-pools')\n      .then(response => response.json())\n      .then(container => {\n        workerPools = workerPools.concat(container.workerPools);\n        workerPools.forEach(workerPool => this.getRunningInstanceCount(workerPool));\n        let domains = workerPools.map(wp => wp.workerPoolId.split('/')[0]).filter((v, i, a) => a.indexOf(v) === i);\n        let pools = Object.assign({}, ...domains.map(domain => ({[domain]: workerPools.filter(wp => wp.workerPoolId.startsWith(domain + '/'))})));\n        this.setState({ domains, pools });\n        if ('continuationToken' in container) {\n          fetch('https://firefox-ci-tc.services.mozilla.com/api/worker-manager/v1/worker-pools?continuationToken=' + container.continuationToken)\n            .then(response => response.json())\n            .then(container => {\n              workerPools = workerPools.concat(container.workerPools);\n              workerPools.forEach(workerPool => this.getRunningInstanceCount(workerPool));\n              domains = workerPools.map(wp => wp.workerPoolId.split('/')[0]).filter((v, i, a) => a.indexOf(v) === i);\n              pools = Object.assign({}, ...domains.map(domain => ({[domain]: workerPools.filter(wp => wp.workerPoolId.startsWith(domain + '/'))})));\n              this.setState({ domains, pools });\n            });\n        }\n      });\n  }\n\n  renderProviderIcon(provider) {\n    switch(provider) {\n      case 'aws':\n        return <FontAwesomeIcon icon={faAws} />;\n      case 'azure':\n        return <FontAwesomeIcon icon={faWindows} />;\n      default:\n        return provider.endsWith('-gcp')\n          ? <FontAwesomeIcon icon={faGoogle} />\n          : <FontAwesomeIcon icon={faHome} />;\n    }\n  }\n\n  getRunningInstanceCount(pool) {\n    // todo: implement running instance count\n    let runningInstanceCounts = this.state.runningInstanceCounts;\n    if (!(pool.workerPoolId in runningInstanceCounts)) {\n      runningInstanceCounts[pool.workerPoolId] = Math.floor(Math.random() * Math.floor(pool.config.maxCapacity));\n      this.setState({ runningInstanceCounts });\n    }\n    return runningInstanceCounts[pool.workerPoolId];\n  }\n\n  getRunningInstanceIconCount(pool) {\n    return Math.round(((this.getRunningInstanceCount(pool) / pool.config.maxCapacity) * 100) / 10);\n  }\n\n  getNonRunningInstanceIconCount(pool) {\n    // this function handles js midpoint rounding so that when 2.5/5 rounds up to 3/5 on running instances, we round down to 2/5 on non-running instances\n    let runningInstanceIconCount = this.getRunningInstanceIconCount(pool);\n    let nonRunningInstanceIconCount = Math.round((((pool.config.maxCapacity - this.getRunningInstanceCount(pool)) / pool.config.maxCapacity) * 100) / 10);\n    if ((runningInstanceIconCount + nonRunningInstanceIconCount) > 10) {\n      return nonRunningInstanceIconCount - 1;\n    }\n    return nonRunningInstanceIconCount;\n  }\n\n  render() {\n    return (\n      <div>\n        <ul>\n        {this.state.domains.map((domain) => (\n          <li key={domain}>\n            {domain}\n            <ul className=\"fa-ul\">\n              {this.state.pools[domain].map((pool) => (\n                <li key={pool.workerPoolId}>\n                  <span className=\"fa-li\">\n                    {this.renderProviderIcon(pool.providerId)}\n                  </span>\n                  <strong>{pool.workerPoolId.split('/')[1]}</strong>\n                  <br />\n                  {\n                    [...Array(this.getRunningInstanceIconCount(pool)).keys()].map((i) => (\n                      <FontAwesomeIcon icon={faServer} key={i} style={{marginRight: '2px', color: '#dff883'}} />\n                    ))\n                  }\n                  {\n                    [...Array(this.getNonRunningInstanceIconCount(pool)).keys()].map((i) => (\n                      <FontAwesomeIcon icon={faServer} key={i} style={{marginRight: '2px', color: '#bebebe'}} />\n                    ))\n                  }\n                  &nbsp;\n                  <span style={{fontSize: '80%'}}>\n                    {this.getRunningInstanceCount(pool)}/{pool.config.maxCapacity}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          </li>\n        ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}