{"version":3,"sources":["PoolSummary.js","App.js","serviceWorker.js","index.js"],"names":["Date","prototype","addHours","hours","this","setHours","getHours","PoolSummary","props","pc","pool","workerPoolId","split","state","instances","pending","domain","length","queryTaskcluster","intervalMs","Math","floor","random","interval","setInterval","bind","clearInterval","fetch","then","response","json","container","concat","workers","setState","config","maxCapacity","continuationToken","pendingTasks","providerId","icon","faAws","faWindows","faTrashAlt","endsWith","faGoogle","faHome","key","className","renderProviderIcon","style","fontSize","filter","i","firstClaim","ProgressBar","striped","variant","now","min","max","Component","App","domains","pools","platform","provider","level","handleFilterChange","workerPools","map","wp","v","a","indexOf","platformFilter","reduce","o","providerFilter","levelFilter","includes","Object","assign","startsWith","event","id","target","filterType","keys","forEach","Container","Row","Form","Check","inline","type","onChange","checked","label","renderPoolSummaryComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e1f087f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAws, faGoogle, faWindows } from \"@fortawesome/free-brands-svg-icons\";\n\nDate.prototype.addHours = function(hours){\n  this.setHours(this.getHours() + hours);\n  return this;\n}\n\nclass PoolSummary extends Component {\n\n  interval;\n\n  constructor(props) {\n    super(props);\n    let pc = this.props.pool.workerPoolId.split('/');\n    this.state = {\n      instances: [],\n      pending: 0,\n      domain: (pc.length > 0) ? pc[0] : '',\n      pool: (pc.length > 1) ? pc[1] : ''\n    };\n    //this.queryTaskcluster = this.queryTaskcluster.bind(this);\n  }\n  \n  componentDidMount() {\n    this.queryTaskcluster();\n    // refresh data in this component at a random interval between 10 and 60 seconds\n    // https://blog.stvmlbrn.com/2019/02/20/automatically-refreshing-data-in-react.html\n    let minIntervalMs = 10000;\n    let maxIntervalMs = 60000;\n    let intervalMs = Math.floor(Math.random() * (maxIntervalMs - minIntervalMs)) + minIntervalMs;\n    this.interval = setInterval(this.queryTaskcluster.bind(this), intervalMs);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  \n  queryTaskcluster() {\n    let instances = [];\n    fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/provisioners/' + this.state.domain + '/worker-types/' + this.state.pool + '/workers')\n      .then(response => response.json())\n      .then(container => {\n        instances = instances.concat(container.workers);\n        this.setState({ instances });\n        if (('continuationToken' in container) && instances.length < this.props.pool.config.maxCapacity) {\n          fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/provisioners/' + this.state.domain + '/worker-types/' + this.state.pool + '/workers?continuationToken=' + container.continuationToken)\n            .then(response => response.json())\n            .then(container => {\n              instances = instances.concat(container.workers);\n              this.setState({ instances });\n              if (('continuationToken' in container) && instances.length < this.props.pool.config.maxCapacity) {\n                fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/provisioners/' + this.state.domain + '/worker-types/' + this.state.pool + '/workers?continuationToken=' + container.continuationToken)\n                  .then(response => response.json())\n                  .then(container => {\n                    instances = instances.concat(container.workers);\n                    this.setState({ instances });\n                    if (('continuationToken' in container) && instances.length < this.props.pool.config.maxCapacity) {\n                      fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/provisioners/' + this.state.domain + '/worker-types/' + this.state.pool + '/workers?continuationToken=' + container.continuationToken)\n                        .then(response => response.json())\n                        .then(container => {\n                          instances = instances.concat(container.workers);\n                          this.setState({ instances });\n                        });\n                    }\n                  });\n              }\n            });\n        }\n      });\n    fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/pending/' + this.state.domain + '/' + this.state.pool)\n      .then(response => response.json())\n      .then(container => {\n        let pending = container.pendingTasks;\n        this.setState({ pending });\n      });\n  }\n\n  renderProviderIcon() {\n    switch(this.props.pool.providerId) {\n      case 'aws':\n        return <FontAwesomeIcon icon={faAws} />;\n      case 'azure':\n        return <FontAwesomeIcon icon={faWindows} />;\n      case 'null-provider':\n        return <FontAwesomeIcon icon={faTrashAlt} />;\n      default:\n        return this.props.pool.providerId.endsWith('-gcp')\n          ? <FontAwesomeIcon icon={faGoogle} />\n          : <FontAwesomeIcon icon={faHome} />;\n    }\n  }\n\n  render() {\n    return (\n      <li key={this.props.pool.workerPoolId}>\n        <span className=\"fa-li\">\n          {this.renderProviderIcon()}\n        </span>\n        <strong>{this.state.pool}</strong>\n        <span style={{fontSize: '80%'}}>\n          &nbsp;max: {this.props.pool.config.maxCapacity},\n          &nbsp;working: {this.state.instances.filter(i => (('latestTask' in i) && ('firstClaim' in i))).length},\n          &nbsp;initialising: {this.state.instances.filter(i => ((!('latestTask' in i) || !('firstClaim' in i)) && ((new Date(i.firstClaim)) > (new Date().addHours(-1))))).length},\n          &nbsp;pending: {this.state.pending}\n        </span>\n        <br />\n        <ProgressBar>\n          <ProgressBar striped variant=\"success\" now={Math.min(this.props.pool.config.maxCapacity, this.state.instances.filter(i => (('latestTask' in i) && ('firstClaim' in i))).length)} max={this.props.pool.config.maxCapacity} key={1} />\n          <ProgressBar striped now={Math.min(this.props.pool.config.maxCapacity, this.state.instances.filter(i => ((!('latestTask' in i) || !('firstClaim' in i)) && ((new Date(i.firstClaim)) > (new Date().addHours(-1))))).length)} max={this.props.pool.config.maxCapacity} key={2} />\n        </ProgressBar>\n      </li>\n    );\n  }\n}\n\nexport default PoolSummary;","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Form from 'react-bootstrap/Form';\nimport PoolSummary from './PoolSummary';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      domains: [],\n      pools: {},\n      filter: {\n        platform: {},\n        provider: {},\n        level: {}\n      }\n    };\n    this.queryTaskcluster = this.queryTaskcluster.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n  }\n  \n  componentDidMount() {\n    this.queryTaskcluster();\n  }\n  \n  queryTaskcluster() {\n    let workerPools = [];\n    fetch('https://firefox-ci-tc.services.mozilla.com/api/worker-manager/v1/worker-pools')\n      .then(response => response.json())\n      .then(container => {\n        workerPools = workerPools.concat(container.workerPools);\n        let domains = workerPools.map(wp => wp.workerPoolId.split('/')[0]).filter((v, i, a) => a.indexOf(v) === i);\n        let platformFilter = workerPools.map(wp => (wp.providerId.endsWith('-gcp')) ? 'google' : (wp.providerId === 'null-provider') ? 'deleted' : wp.providerId).filter((v, i, a) => a.indexOf(v) === i).reduce((o, v) => { o[v] = false; return o; }, {});\n        let providerFilter = workerPools.map(wp => wp.providerId).filter((v, i, a) => a.indexOf(v) === i).reduce((o, v) => { o[v] = false; return o; }, {});\n        let levelFilter = workerPools.map(wp => {\n          if (wp.providerId.includes('-level1-') || (wp.workerPoolId.split('/')[0].endsWith('-1'))) {\n            return 'one';\n          } else if (wp.providerId.includes('-level3-') || (wp.workerPoolId.split('/')[0].endsWith('-3'))) {\n            return 'three';\n          } else if (wp.providerId.includes('-test-') || (wp.workerPoolId.split('/')[0].endsWith('-t'))) {\n            return 'test';\n          }\n          return 'none';\n        }).filter((v, i, a) => a.indexOf(v) === i).reduce((o, v) => { o[v] = false; return o; }, {});\n        let pools = Object.assign({}, ...domains.map(domain => ({[domain]: workerPools.filter(wp => wp.workerPoolId.startsWith(domain + '/'))})));\n        this.setState(state => {\n          state.domains = domains;\n          state.pools = pools;\n          state.filter.platform = platformFilter;\n          state.filter.provider = providerFilter;\n          state.filter.level = levelFilter;\n          return state;\n        });\n        if ('continuationToken' in container) {\n          fetch('https://firefox-ci-tc.services.mozilla.com/api/worker-manager/v1/worker-pools?continuationToken=' + container.continuationToken)\n            .then(response => response.json())\n            .then(container => {\n              workerPools = workerPools.concat(container.workerPools);\n              domains = workerPools.map(wp => wp.workerPoolId.split('/')[0]).filter((v, i, a) => a.indexOf(v) === i);\n              platformFilter = workerPools.map(wp => (wp.providerId.endsWith('-gcp')) ? 'google' : (wp.providerId === 'null-provider') ? 'deleted' : wp.providerId).filter((v, i, a) => a.indexOf(v) === i).reduce((o, v) => { o[v] = false; return o; }, {});\n              providerFilter = workerPools.map(wp => wp.providerId).filter((v, i, a) => a.indexOf(v) === i).reduce((o, v) => { o[v] = false; return o; }, {});\n              levelFilter = workerPools.map(wp => {\n                if (wp.providerId.includes('-level1-') || (wp.workerPoolId.split('/')[0].endsWith('-1'))) {\n                  return 'one';\n                } else if (wp.providerId.includes('-level3-') || (wp.workerPoolId.split('/')[0].endsWith('-3'))) {\n                  return 'three';\n                } else if (wp.providerId.includes('-test-') || (wp.workerPoolId.split('/')[0].endsWith('-t'))) {\n                  return 'test';\n                }\n                return 'none';\n              }).filter((v, i, a) => a.indexOf(v) === i).reduce((o, v) => { o[v] = false; return o; }, {});\n              pools = Object.assign({}, ...domains.map(domain => ({[domain]: workerPools.filter(wp => wp.workerPoolId.startsWith(domain + '/'))})));\n              this.setState(state => {\n                state.domains = domains;\n                state.pools = pools;\n                state.filter.platform = platformFilter;\n                state.filter.provider = providerFilter;\n                state.filter.level = levelFilter;\n                return state;\n              });\n            });\n        }\n      });\n  }\n\n  renderPoolSummaryComponent(pool) {\n    let platform;\n    if (pool.providerId in this.state.filter.platform) {\n      platform = pool.providerId;\n    } else if (pool.providerId.endsWith('-gcp')) {\n      platform = 'google';\n    }\n    let level;\n    if (pool.providerId.includes('-level1-') || (pool.workerPoolId.split('/')[0].endsWith('-1'))) {\n      level = 'one';\n    } else if (pool.providerId.includes('-level3-') || (pool.workerPoolId.split('/')[0].endsWith('-3'))) {\n      level = 'three';\n    } else if (pool.providerId.includes('-test-') || (pool.workerPoolId.split('/')[0].endsWith('-t'))) {\n      level = 'test';\n    } else {\n      level = 'none';\n    }\n    return ((!this.state.filter.platform[platform]) && (!this.state.filter.provider[pool.providerId]) && (!this.state.filter.level[level]))\n      ? <PoolSummary pool={pool} key={pool.workerPoolId} />\n      : '';\n  }\n\n  handleFilterChange(event) {\n    let id = event.target.id.split('_');\n    let filterType = id[1];\n    let filter = id[2];\n    switch (filterType) {\n      case 'platform':\n        switch (filter) {\n          case 'aws':\n          case 'azure':\n            this.setState(state => {\n              state.filter.provider[filter] = !state.filter.platform[filter];\n              state.filter.platform[filter] = !state.filter.platform[filter];\n              return state;\n            });\n            break;\n          case 'google':\n            this.setState(state => {\n              Object.keys(state.filter.provider).filter(provider => provider.endsWith('-gcp')).forEach(provider => {\n                state.filter.provider[provider] = !state.filter.platform[filter];\n              });\n              state.filter.platform[filter] = !state.filter.platform[filter];\n              return state;\n            });\n            break;\n          case 'deleted':\n            this.setState(state => {\n              state.filter.provider['null-provider'] = !state.filter.platform[filter];\n              state.filter.platform[filter] = !state.filter.platform[filter];\n              return state;\n            });\n            break;\n          default:\n            this.setState(state => (state.filter[filterType][filter] = !state.filter[filterType][filter], state));\n            break;\n        }\n        break;\n      default:\n        this.setState(state => (state.filter[filterType][filter] = !state.filter[filterType][filter], state));\n        break;\n    }\n    \n  }\n\n  render() {\n    return (\n      <Container>\n        {Object.keys(this.state.filter).map((filterType) => (\n          <Row>\n            {filterType}s:&nbsp;\n            <Form>\n              {Object.keys(this.state.filter[filterType]).map((filter) => (\n                <Form.Check inline type=\"checkbox\" onChange={this.handleFilterChange} checked={!this.state.filter[filterType][filter]} label={filter} id={'filter_' + filterType + '_' + filter} key={'filter_' + filterType + '_' + filter} />\n              ))}\n            </Form>\n          </Row>\n        ))}\n        <Row>\n          <ul>\n          {this.state.domains.map((domain) => (\n            <li key={domain}>\n              {domain}\n              <ul className=\"fa-ul\">\n                {this.state.pools[domain].map((pool) => (\n                  this.renderPoolSummaryComponent(pool)\n                ))}\n              </ul>\n            </li>\n          ))}\n          </ul>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}