{"version":3,"sources":["PoolSummary.js","DomainSummary.js","App.js","serviceWorker.js","index.js"],"names":["Date","prototype","addHours","hours","this","setHours","getHours","PoolSummary","props","pc","pool","workerPoolId","split","state","instances","pending","domain","length","queryTaskcluster","intervalMs","Math","floor","random","interval","setInterval","bind","clearInterval","fetch","then","response","json","container","concat","workers","setState","config","maxCapacity","continuationToken","pendingTasks","providerId","icon","faAws","faWindows","faTrashAlt","endsWith","faGoogle","faHome","key","className","renderProviderIcon","style","fontSize","filter","i","firstClaim","ProgressBar","striped","variant","now","min","max","Component","DomainSummary","platform","level","includes","provider","pools","map","renderPoolSummaryComponent","App","domains","handleFilterChange","workerPools","wp","v","a","indexOf","platformFilter","reduce","o","providerFilter","levelFilter","Object","assign","startsWith","allDomainPlatformsShouldBeFiltered","every","dp","allDomainProvidersShouldBeFiltered","allDomainLevelsShouldBeFiltered","domainLevel","dl","event","id","target","filterType","keys","forEach","Container","Row","Form","Check","inline","type","onChange","checked","label","renderDomainSummaryComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9d7be0b6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAws, faGoogle, faWindows } from \"@fortawesome/free-brands-svg-icons\";\n\nDate.prototype.addHours = function(hours){\n  this.setHours(this.getHours() + hours);\n  return this;\n}\nconst minIntervalMs = 10000;\nconst maxIntervalMs = 60000;\n\nclass PoolSummary extends Component {\n\n  interval;\n\n  constructor(props) {\n    super(props);\n    let pc = this.props.pool.workerPoolId.split('/');\n    this.state = {\n      instances: [],\n      pending: 0,\n      domain: (pc.length > 0) ? pc[0] : '',\n      pool: (pc.length > 1) ? pc[1] : ''\n    };\n  }\n  \n  componentDidMount() {\n    this.queryTaskcluster();\n    // refresh data in this component at a random interval, in\n    // order to prevent all components updating simultaneously\n    // https://blog.stvmlbrn.com/2019/02/20/automatically-refreshing-data-in-react.html\n    let intervalMs = Math.floor(Math.random() * (maxIntervalMs - minIntervalMs)) + minIntervalMs;\n    this.interval = setInterval(this.queryTaskcluster.bind(this), intervalMs);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  \n  queryTaskcluster() {\n    let instances = [];\n    fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/provisioners/' + this.state.domain + '/worker-types/' + this.state.pool + '/workers')\n      .then(response => response.json())\n      .then(container => {\n        instances = instances.concat(container.workers);\n        this.setState({ instances });\n        if (('continuationToken' in container) && instances.length < this.props.pool.config.maxCapacity) {\n          fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/provisioners/' + this.state.domain + '/worker-types/' + this.state.pool + '/workers?continuationToken=' + container.continuationToken)\n            .then(response => response.json())\n            .then(container => {\n              instances = instances.concat(container.workers);\n              if ('continuationToken' in container) {\n                fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/provisioners/' + this.state.domain + '/worker-types/' + this.state.pool + '/workers?continuationToken=' + container.continuationToken)\n                  .then(response => response.json())\n                  .then(container => {\n                    instances = instances.concat(container.workers);\n                    this.setState({ instances });\n                    if (('continuationToken' in container) && instances.length < this.props.pool.config.maxCapacity) {\n                      fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/provisioners/' + this.state.domain + '/worker-types/' + this.state.pool + '/workers?continuationToken=' + container.continuationToken)\n                        .then(response => response.json())\n                        .then(container => {\n                          instances = instances.concat(container.workers);\n                          this.setState({ instances });\n                        });\n                    }\n                  });\n              } else {\n                this.setState({ instances });\n              }\n            });\n        }\n      });\n    fetch('https://firefox-ci-tc.services.mozilla.com/api/queue/v1/pending/' + this.state.domain + '/' + this.state.pool)\n      .then(response => response.json())\n      .then(container => {\n        let pending = container.pendingTasks;\n        this.setState({ pending });\n      });\n  }\n\n  renderProviderIcon() {\n    switch(this.props.pool.providerId) {\n      case 'aws':\n        return <FontAwesomeIcon icon={faAws} />;\n      case 'azure':\n        return <FontAwesomeIcon icon={faWindows} />;\n      case 'null-provider':\n        return <FontAwesomeIcon icon={faTrashAlt} />;\n      default:\n        return this.props.pool.providerId.endsWith('-gcp')\n          ? <FontAwesomeIcon icon={faGoogle} />\n          : <FontAwesomeIcon icon={faHome} />;\n    }\n  }\n\n  render() {\n    return (\n      <li key={this.props.pool.workerPoolId}>\n        <span className=\"fa-li\">\n          {this.renderProviderIcon()}\n        </span>\n        <strong>{this.state.pool}</strong>\n        <span style={{fontSize: '80%'}}>\n          &nbsp;max: {this.props.pool.config.maxCapacity},\n          &nbsp;working: {this.state.instances.filter(i => (('latestTask' in i) && ('firstClaim' in i))).length},\n          &nbsp;initialising: {this.state.instances.filter(i => ((!('latestTask' in i) || !('firstClaim' in i)) && ((new Date(i.firstClaim)) > (new Date().addHours(-1))))).length},\n          &nbsp;pending: {this.state.pending}\n        </span>\n        <br />\n        <ProgressBar>\n          <ProgressBar striped variant=\"success\" now={Math.min(this.props.pool.config.maxCapacity, this.state.instances.filter(i => (('latestTask' in i) && ('firstClaim' in i))).length)} max={this.props.pool.config.maxCapacity} key={1} />\n          <ProgressBar striped now={Math.min(this.props.pool.config.maxCapacity, this.state.instances.filter(i => ((!('latestTask' in i) || !('firstClaim' in i)) && ((new Date(i.firstClaim)) > (new Date().addHours(-1))))).length)} max={this.props.pool.config.maxCapacity} key={2} />\n        </ProgressBar>\n      </li>\n    );\n  }\n}\n\nexport default PoolSummary;","import React, { Component } from 'react';\nimport PoolSummary from './PoolSummary';\n\n\nclass DomainSummary extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  renderPoolSummaryComponent(pool, filter) {\n    let platform;\n    if (pool.providerId in filter.platform) {\n      platform = pool.providerId;\n    } else if (pool.providerId.endsWith('-gcp')) {\n      platform = 'google';\n    }\n    let level;\n    if (pool.providerId.includes('-level1-') || (pool.workerPoolId.split('/')[0].endsWith('-1'))) {\n      level = 'one';\n    } else if (pool.providerId.includes('-level3-') || (pool.workerPoolId.split('/')[0].endsWith('-3'))) {\n      level = 'three';\n    } else if (pool.providerId.includes('-test-') || (pool.workerPoolId.split('/')[0].endsWith('-t'))) {\n      level = 'test';\n    } else {\n      level = 'none';\n    }\n    return ((!filter.platform[platform]) && (!filter.provider[pool.providerId]) && (!filter.level[level]))\n      ? <PoolSummary pool={pool} key={pool.workerPoolId} />\n      : '';\n  }\n\n  render() {\n    return (\n      <li>\n        {this.props.domain}\n        <ul className=\"fa-ul\">\n          {this.props.pools.map((pool) => (\n            this.renderPoolSummaryComponent(pool, this.props.filter)\n          ))}\n        </ul>\n      </li>\n    );\n  }\n}\n\nexport default DomainSummary;","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Form from 'react-bootstrap/Form';\nimport DomainSummary from './DomainSummary';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      domains: [],\n      pools: {},\n      filter: {\n        platform: {},\n        provider: {},\n        level: {}\n      }\n    };\n    this.queryTaskcluster = this.queryTaskcluster.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n  }\n  \n  componentDidMount() {\n    this.queryTaskcluster();\n  }\n  \n  queryTaskcluster() {\n    let workerPools = [];\n    fetch('https://firefox-ci-tc.services.mozilla.com/api/worker-manager/v1/worker-pools')\n      .then(response => response.json())\n      .then(container => {\n        workerPools = workerPools.concat(container.workerPools);\n        let domains = workerPools.map(wp => wp.workerPoolId.split('/')[0]).filter((v, i, a) => a.indexOf(v) === i);\n        let platformFilter = workerPools.map(wp => (wp.providerId.endsWith('-gcp')) ? 'google' : (wp.providerId === 'null-provider') ? 'deleted' : wp.providerId).filter((v, i, a) => a.indexOf(v) === i).reduce((o, v) => { o[v] = false; return o; }, {});\n        let providerFilter = workerPools.map(wp => wp.providerId).filter((v, i, a) => a.indexOf(v) === i).reduce((o, v) => { o[v] = false; return o; }, {});\n        let levelFilter = workerPools.map(wp => {\n          if (wp.providerId.includes('-level1-') || (wp.workerPoolId.split('/')[0].endsWith('-1'))) {\n            return 'one';\n          } else if (wp.providerId.includes('-level3-') || (wp.workerPoolId.split('/')[0].endsWith('-3'))) {\n            return 'three';\n          } else if (wp.providerId.includes('-test-') || (wp.workerPoolId.split('/')[0].endsWith('-t'))) {\n            return 'test';\n          }\n          return 'none';\n        }).filter((v, i, a) => a.indexOf(v) === i).reduce((o, v) => { o[v] = false; return o; }, {});\n        let pools = Object.assign({}, ...domains.map(domain => ({[domain]: workerPools.filter(wp => wp.workerPoolId.startsWith(domain + '/'))})));\n        this.setState(state => {\n          state.domains = domains;\n          state.pools = pools;\n          state.filter.platform = platformFilter;\n          state.filter.provider = providerFilter;\n          state.filter.level = levelFilter;\n          return state;\n        });\n        if ('continuationToken' in container) {\n          fetch('https://firefox-ci-tc.services.mozilla.com/api/worker-manager/v1/worker-pools?continuationToken=' + container.continuationToken)\n            .then(response => response.json())\n            .then(container => {\n              workerPools = workerPools.concat(container.workerPools);\n              domains = workerPools.map(wp => wp.workerPoolId.split('/')[0]).filter((v, i, a) => a.indexOf(v) === i);\n              platformFilter = workerPools.map(wp => (wp.providerId.endsWith('-gcp')) ? 'google' : (wp.providerId === 'null-provider') ? 'deleted' : wp.providerId).filter((v, i, a) => a.indexOf(v) === i).reduce((o, v) => { o[v] = false; return o; }, {});\n              providerFilter = workerPools.map(wp => wp.providerId).filter((v, i, a) => a.indexOf(v) === i).reduce((o, v) => { o[v] = false; return o; }, {});\n              levelFilter = workerPools.map(wp => {\n                if (wp.providerId.includes('-level1-') || (wp.workerPoolId.split('/')[0].endsWith('-1'))) {\n                  return 'one';\n                } else if (wp.providerId.includes('-level3-') || (wp.workerPoolId.split('/')[0].endsWith('-3'))) {\n                  return 'three';\n                } else if (wp.providerId.includes('-test-') || (wp.workerPoolId.split('/')[0].endsWith('-t'))) {\n                  return 'test';\n                }\n                return 'none';\n              }).filter((v, i, a) => a.indexOf(v) === i).reduce((o, v) => { o[v] = false; return o; }, {});\n              pools = Object.assign({}, ...domains.map(domain => ({[domain]: workerPools.filter(wp => wp.workerPoolId.startsWith(domain + '/'))})));\n              this.setState(state => {\n                state.domains = domains;\n                state.pools = pools;\n                state.filter.platform = platformFilter;\n                state.filter.provider = providerFilter;\n                state.filter.level = levelFilter;\n                return state;\n              });\n            });\n        }\n      });\n  }\n\n  renderDomainSummaryComponent(domain, pools, filter) {\n    let domainPlatforms = pools.map(wp => (wp.providerId.endsWith('-gcp')) ? 'google' : (wp.providerId === 'null-provider') ? 'deleted' : wp.providerId).filter((v, i, a) => a.indexOf(v) === i);\n    let allDomainPlatformsShouldBeFiltered = domainPlatforms.every(dp => ((dp in filter.platform) && filter.platform[dp]));\n\n    let domainProviders = pools.map(wp => wp.providerId).filter((v, i, a) => a.indexOf(v) === i);\n    let allDomainProvidersShouldBeFiltered = domainProviders.every(dp => ((dp in filter.provider) && filter.provider[dp]));\n\n    let allDomainLevelsShouldBeFiltered = false;\n    if (domain.endsWith('-1') || domain.endsWith('-3') || domain.endsWith('-t')) {\n      let domainLevel = (domain.endsWith('-1')) ? 'one' : (domain.endsWith('-3')) ? 'three' : 'test';\n      allDomainLevelsShouldBeFiltered = ((domainLevel in filter.level) && filter.level[domainLevel]);\n    } else {\n      let domainLevels = pools.map(wp => (wp.providerId.includes('-level1-')) ? 'one' : (wp.providerId.includes('-level3-')) ? 'three' : (wp.providerId.includes('-test-')) ? 'test' : 'none').filter((v, i, a) => a.indexOf(v) === i);\n      allDomainLevelsShouldBeFiltered = domainLevels.every(dl => ((dl in filter.level) && filter.level[dl]));\n    }\n\n    return ((!allDomainPlatformsShouldBeFiltered) && (!allDomainProvidersShouldBeFiltered) && (!allDomainLevelsShouldBeFiltered))\n      ? <DomainSummary domain={domain} pools={pools} filter={filter} key={domain} />\n      : '';\n  }\n\n  handleFilterChange(event) {\n    let id = event.target.id.split('_');\n    let filterType = id[1];\n    let filter = id[2];\n    switch (filterType) {\n      case 'platform':\n        switch (filter) {\n          case 'aws':\n          case 'azure':\n            this.setState(state => {\n              state.filter.provider[filter] = !state.filter.platform[filter];\n              state.filter.platform[filter] = !state.filter.platform[filter];\n              return state;\n            });\n            break;\n          case 'google':\n            this.setState(state => {\n              Object.keys(state.filter.provider).filter(provider => provider.endsWith('-gcp')).forEach(provider => {\n                state.filter.provider[provider] = !state.filter.platform[filter];\n              });\n              state.filter.platform[filter] = !state.filter.platform[filter];\n              return state;\n            });\n            break;\n          case 'deleted':\n            this.setState(state => {\n              state.filter.provider['null-provider'] = !state.filter.platform[filter];\n              state.filter.platform[filter] = !state.filter.platform[filter];\n              return state;\n            });\n            break;\n          default:\n            this.setState(state => (state.filter[filterType][filter] = !state.filter[filterType][filter], state));\n            break;\n        }\n        break;\n      default:\n        this.setState(state => (state.filter[filterType][filter] = !state.filter[filterType][filter], state));\n        break;\n    }\n    \n  }\n\n  render() {\n    return (\n      <Container>\n        {Object.keys(this.state.filter).map((filterType) => (\n          <Row>\n            {filterType}s:&nbsp;\n            <Form>\n              {Object.keys(this.state.filter[filterType]).map((filter) => (\n                <Form.Check inline type=\"checkbox\" onChange={this.handleFilterChange} checked={!this.state.filter[filterType][filter]} label={filter} id={'filter_' + filterType + '_' + filter} key={'filter_' + filterType + '_' + filter} />\n              ))}\n            </Form>\n          </Row>\n        ))}\n        <Row>\n          <ul>\n          {this.state.domains.map((domain) => (\n            this.renderDomainSummaryComponent(domain, this.state.pools[domain], this.state.filter)\n          ))}\n          </ul>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}